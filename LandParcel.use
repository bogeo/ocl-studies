-- LandParcel model, which is used to represent a land parcel 
model LandParcel

-- Classes:
class LandParcel 
attributes
    area : Real
    id : String
    boundary: BoundaryLine[*] 

operations
    -- die 2 neuen Parcels sind 1. das Objekt auf dem die Operation ausgeführt wird und 2. der Rückgabewert der Operation
    split(bl : BoundaryLine) : LandParcel 
    merge(lp : LandParcel) : LandParcel
end

class ValidityPeriod
attributes
    startDate : Date
    endDate : Date
end

class BoundaryLine
attributes
    firstPoint : BoundaryPoint
    secondPoint : BoundaryPoint
operations
    split(bp : BoundaryPoint) : BoundaryLine[2]
end

class BoundaryPoint
attributes
    x : Real
    y : Real
operations
    move(x : Real, y : Real) : BoundaryPoint
end

class Date
attributes
    day : Integer
    month : Integer
    year : Integer
end


-- Associations:
-- LandParcel - ValidityPeriod
association LandParcel_ValidityPeriod between
    LandParcel[1]
    ValidityPeriod[1] role validityperiod
end

-- LandParcel - BoundaryLine
association LandParcel_BoundaryLine between
    LandParcel[1]
    BoundaryLine [*] role border
end

-- BoundaryLine - LandParcel
association BoundaryLine_LandParcel between
    BoundaryLine [1] 
    LandParcel[2] role neighbours
end

-- BoundaryLine - BoundaryPoint
association BoundaryLine_BoundaryPoint between
    BoundaryLine[1]
    BoundaryPoint[*]
end



constraints
--Marius

-- Invariants
-- the boundary line must be a closed polygon firstPoint = lastPoint
context LandParcel inv closedPolygon:
    self.border -> first() = self.border -> last()

-- the boundary line must not be empty
context LandParcel inv noEmptyBoundaryLine:
    self.border -> size() > 0

-- The ID of a land parcel must be unique
context LandParcel inv uniqueID:
    LandParcel.allInstances() -> forAll(landParcel1, landParcel2 |
        landParcel1 <> landParcel2 implies landParcel1.id <> landParcel2.id)

-- no gap between boundary lines: The pre and post boundary lines must have the same coordinates at the point
-- where they are connected
context LandParcel inv noGapBetweenBoundaryLines:
    self.border -> forAll(BoundaryLine1, BoundaryLine2 | 
        BoundaryLine1 <> BoundaryLine2
         implies
          not(
            BoundaryLine1.secondPoint.x = BoundaryLine2.firstPoint.x and BoundaryLine1.secondPoint.y = BoundaryLine2.firstPoint.y))

-- FIXME: the coordinates of a boundary point must be positive
-- context BoundaryPoint inv positiveCoordinates:
-- self.x > 0 and self.y > 0

-- TODO: The boundary line must not intersect itself


-- no duplicate boundary points at the same position (similar to script S 111)
context BoundaryPoint inv noDuplicateBoundaryPoints:
    self.border -> forAll(BoundaryPoint1, BoundaryPoint2 | 
        BoundaryPoint1 <> BoundaryPoint2
         implies
          not(
            BoundaryPoint1.x = BoundaryPoint2.x and BoundaryPoint1.y = BoundaryPoint2.y))

-- no duplicate boundary lines (similar to script S 111)
context BoundaryLine inv noDuplicateBoundaryLines:
    self.border -> forAll(BoundaryLine1, BoundaryLine2 | 
        BoundaryLine1 <> BoundaryLine2
         implies
          not(
            BoundaryLine1.firstPoint.x = BoundaryLine2.firstPoint.x and BoundaryLine1.firstPoint.y = BoundaryLine2.firstPoint.y and
            BoundaryLine1.secondPoint.x = BoundaryLine2.secondPoint.x and BoundaryLine1.secondPoint.y = BoundaryLine2.secondPoint.y))


-- move boundary point (similar to script S 111)
context BoundaryPoint::move(dx : Real, dy : Real) : BoundaryPoint
pre xAndYAreNotZero:
    x <> 0 and y <> 0
post xAndYAreSet:
    x = self.x@pre + dx and y = self.y@pre + dy

-- TODO: split boundary line
context BoundaryLine::split(bp : BoundaryPoint) : BoundaryLine[2]


--Judith
context LandParcel::split(bl : BoundaryLine) : LandParcel
pre boundaryLineCanSplitParcel:
-- die übergebene boundary Line, an der geteilt werden soll, schneidet die Fläche (auf Geometrie Definition warten)
--pre newParcelsNotExisting: -- wahrsch. nicht logisch weil ids noch nicht bekannt / Überschneidungen bereits ausgeschlossen
    -- die Flurstücke existieren vorher noch nicht
    --LandParcel.allInstances()->exists(lp | lp.id = self.id) = false and -- result und @pre verwendbar?
    --LandParcel.allInstances()->exists(lp | lp.id = result.id) = false
--pre oldParcelExisting:
    -- das Flurstück, das geteilt werden soll, existiert
    LandParcel.allInstances()->exists(lp | lp.id = self.id) = true

post sameOuterBorder:
    -- äußere Begrenzung soll gleich bleiben
    self.border@pre = self.border->symmetricDifference(result.border)
post sameArea:
    -- Flächengröße soll gleich bleiben
    self.area@pre = result.area + self.area
post noEmptyParcel:
    -- Flächen größer Null
    self.area > 0 and result.area > 0
post startDateMatching:
    -- Das Enddatum der alten Parcel ist das StartDatum der neuen Parcels
    result.validityperiod.startDate = self.validityperiod.endDate@pre and
    self.validityperiod.startDate = self.validityperiod.endDate@pre
post parcelsHaveSharedBorder:
    -- neue entstandende Flurstücke sind benachbart
    result.border.neighbours->includes(result) and
    self.border.neighbours->includes(self)
post newParcelsAreNotTheSame:
    -- die neuen Flurstücke dürfen nicht gleich sein (komplett gleiche borders, id, etc)
    not(self.id = result.id) and
    not(self.border = result.border)
post newParcelsAreDifferentFromOld:
    -- keins der neuen Flurstücke darf gleich sein zum alten
    not(self.id@pre = result.id) and
    not(self.border@pre = result.border) and
    not(self.id@pre = self.id) and
    not(self.border@pre = self.border)

post newParcelsHaveBeenCreated:
    -- die neuen Flurstücke existieren
    LandParcel.allInstances()->exists(lp | lp.id = self.id) = true and
    LandParcel.allInstances()->exists(lp | lp.id = result.id) = true
post oldParcelHasBeenDeleted:
    -- das alte Flurstück wurde gelöscht / überschrieben
    LandParcel.allInstances()->exists(lp | lp.id = self.id@pre) = false

--context LandParcel:merge(lp : LandParcel) : LandParcel
--pre parcelsHaveSharedBorderLine:
-- die Flurstücke teilen sich eine Grenze --> Nachbarschaft verwenden
--post sameOuterBorder:
-- äußere Begrenzung soll gleich bleiben
--post sameArea:
-- Fläche soll gleich bleiben
--post startDateMatching:
-- enddatum a,b = startdatum c (existiert?)
--post noParcelsWithOldIDs:
-- alte existieren nicht mehr

context ValidityPeriod
inv validTimePeriod:
-- startDate muss kleiner als endDate sein
  startDate.year < endDate.year or 
  startDate.year = endDate.year and (
    (startDate.month < endDate.month) or 
    (startDate.month = endDate.month and startDate.day <= endDate.day) 
  )

